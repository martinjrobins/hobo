[[model]]
name: Beattie-2017-IKr
author: Michael Clerx
# Initial values
ikr.open = 0
ikr.active = 1

#
# Simulation engine variables
#
[engine]
time = 0 bind time
pace = 0 bind pace

#
# Membrane potential
#
[membrane]
V = engine.pace
    desc: membane potential
    in [mV]

[nernst]
#EK = -85 [mV]
EK = -88.4 [mV]

[ikr]
use membrane.V
IKr = g * open * active * (V - nernst.EK)
dot(open) = (inf - open) / tau
    inf = k1 * tau
    tau = 1 / (k1 + k2)
    k1 = p1 * exp(p2 * V)
    k2 = p3 * exp(-p4 * V)
dot(active) = (inf - active) / tau
    inf = k4 * tau
    tau = 1 / (k3 + k4)
    k3 = p5 * exp(p6 * V)
    k4 = p7 * exp(-p8 * V)
p1 = 2.26e-4 [1/ms]
p2 = 0.0699 [1/mV]
p3 = 3.45e-5 [1/ms]
p4 = 0.05462 [1/mV]
p5 = 0.0873 [1/ms]
p6 = 8.91e-3 [1/mV]
p7 = 5.15e-3 [1/ms]
p8 = 0.03158 [1/mV]
g = 0.1524 [nA]

[[script]]
import matplotlib.pyplot as pl
import myokit
import myokit.pacing as pacing
import numpy as np

#
# Simple IKr test script
#

# Get model
m = get_model()

# Create step data
p = myokit.Protocol()
p.add_step(-80, 250)
p.add_step(-120, 50)
p.add_step(-80, 200)
p.add_step(40, 1000)
p.add_step(-120, 500)
p.add_step(-80, 1000)
p.add_step(-30, 3500)
p.add_step(-120, 500)
p.add_step(-80, 1000)

# Change RHS of membrane.V
m.get('membrane.V').set_rhs('if(engine.time < 3000 or engine.time >= 6500,'
    + ' engine.pace, '
    + ' - 30'
    + ' + 54 * sin(0.007 * (engine.time - 2500))'
    + ' + 26 * sin(0.037 * (engine.time - 2500))'
    + ' + 10 * sin(0.190 * (engine.time - 2500))'
    + ')')

d = [
    'engine.time',
    'membrane.V',
    'ikr.IKr',
    ]

# Run simulation
s = myokit.Simulation(m, p)
d = s.run(p.characteristic_time(), log=d).npview()

# Plot selection
pl.figure()
pl.xlabel('Time [s]')
pl.subplot(2,1,1)
pl.xlim(4, 6)
pl.plot(d.time()*1e-3, d['membrane.V'], color='tab:green')
pl.subplot(2,1,2)
pl.xlim(4, 6)
pl.ylim(-1.1, 1.2)
pl.plot(d.time()*1e-3, d['ikr.IKr'])

# Show all
pl.show()


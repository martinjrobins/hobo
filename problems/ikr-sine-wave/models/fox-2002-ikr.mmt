[[model]]
name: Fox2002IKr
author: Michael Clerx
# Initial values
ikr.x = 0

#
# Simulation engine variables
#
[engine]
time = 0 bind time
pace = 0 bind pace

#
# Membrane potential
#
[membrane]
V = engine.pace
    desc: membane potential
    in [mV]

[nernst]
EK = -85 [mV]

[ikr]
use membrane.V
dot(x) = (inf - x) / tau
    tau = p1 + 1 / (exp(p2 + p3 * V) + exp(p4 + p5 * V))
    inf = 1 / (1 + exp(p6 + p7 * V))
r = 1 / (1 + p8 * exp(p9 * (V + 28)))
g = p10
IKr = g * x * r * (V - nernst.EK)
p1 = 43 [ms]
p2 = -5.495 [1]
p3 = 0.1691 [1/mV]
p4 = -7.677 [1]
p5 = -0.0128 [1/mV]
p6 = -2.182 [1]
p7 = -0.1819 [1/mV]
p8 = 2.5 [1]
p9 = 0.1 [1/mV]
p10 = 0.04 [mS/uF]

[[script]]
import myokit
import myokit.pacing as pacing
import numpy as np
import matplotlib
import matplotlib.pyplot as pl

#
# Simple IKr test script
#

# Get model
m = get_model()

# Create pacing protocol
v = np.arange(-100, 50 + 10, 10)
p = pacing.steptrain(
        vsteps=v,
        vhold=-80,
        tpre=2000,
        tstep=5000,
        tpost=3000)

d = [
    'engine.time',
    'membrane.V',
    'ikr.IKr',
    ]

# Run simulation
s = myokit.Simulation(m, p)
d = s.run(p.characteristic_time(), log=d)

# Create colormap for plotting
cmap = matplotlib.cm.get_cmap('viridis')
norm = matplotlib.colors.Normalize(0, len(v))

# Plot data as overlapping steps
d2 = d.npview()
d2 = d2.regularize(0.5)
d2 = d2.fold(10000)
pl.figure()
for k in xrange(len(v)):
    pl.subplot(2,1,1)
    pl.plot(d2.time(), d2['membrane.V', k], color=cmap(norm(k)))
    pl.subplot(2,1,2)
    pl.plot(d2.time(), d2['ikr.IKr', k], color=cmap(norm(k)))
pl.show()


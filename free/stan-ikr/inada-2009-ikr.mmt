[[model]]
name: Inada-2009-IKr
author: Michael Clerx
# Initial values
ikr.xf = 0
ikr.xs = 0
ikr.r = 1

#
# Simulation engine variables
#
[engine]
time = 0 bind time
pace = 0 bind pace

#
# Membrane potential
#
[membrane]
V = engine.pace
    desc: membane potential
    in [mV]

[nernst]
EK = -85 [mV]

[ikr]
use membrane.V
xinf = 1 / (1 + exp(-(V + p1) / p2))
dot(xf) = (xinf - xf) / tau
    tau = 1 / (p3 * exp(p4 * V) + p5 * exp(-p6 * V))
dot(xs) = (xinf - xs) / tau
    tau = p7 + p8 * exp(-(V + p9)^2 / p10)
dot(r) = (inf - r) / tau
    inf = (1 - p13 * exp(-V^2 / p14))
    tau = 1 / (a + b)
        a = p15 * exp(-p16 * V)
        b = p17 * exp(p18 * V)
g = p20
x = p19 * xf + (1 - p19) * xs
IKr = g * x * r * (V - nernst.EK)
p1  = 10.22 [mV]
p2  = 8.5 [mV]
p3  = 0.017 [1/ms]
p4  = 0.0398 [1/mV]
p5  = 0.000211 [1/ms]
p6  = 0.0510 [1/mV]
p7  = 335.81 [ms]
p8  = 906.73 [ms]
p9  = 10 [mV]
p10 = 988.05 [mV^2]
p11 = 4.9 [mV]
p12 = 15.14 [mV]
p13 = 0.3 [1]
p14 = 500 [mV^2]
p15 = 0.09201 [1/ms]
p16 = 0.0183 [1/mV]
p17 = 0.6036 [1/ms]
p18 = 0.00942 [1/mV]
p19 = 0.9 [1]
p20 = 0.04 [mS/uF]

[[script]]
import matplotlib.pyplot as pl
import myokit
import myokit.pacing as pacing
import numpy as np

#
# Simple IKr test script
#

# Get model
m = get_model()

# Create pacing protocol
v = np.arange(-100, 50 + 10, 10)
p = pacing.steptrain(
        vsteps=v,
        vhold=-80,
        tpre=2000,
        tstep=5000,
        tpost=3000)

d = [
    'engine.time',
    'membrane.V',
    'ikr.IKr',
    ]

# Run simulation
s = myokit.Simulation(m, p)
d = s.run(p.characteristic_time(), log=d)

# Plot data as overlapping steps
d2 = d.npview()
d2 = d2.regularize(0.5)
d2 = d2.fold(10000)
pl.figure()
for k in xrange(len(v)):
    pl.subplot(2,1,1)
    pl.plot(d2.time(), d2['membrane.V', k])
    pl.subplot(2,1,2)
    pl.plot(d2.time(), d2['ikr.IKr', k])
pl.show()


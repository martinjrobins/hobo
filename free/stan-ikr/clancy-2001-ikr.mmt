[[model]]
name: Clancy2001IKr
author: Michael Clerx
# Initial values
ikr.C3 = 0.98
ikr.C2 = 0.005
ikr.C1 = 0.015
ikr.I = 0
ikr.O = 0

#
# Simulation engine variables
#
[engine]
time = 0 bind time
pace = 0 bind pace

#
# Membrane potential
#
[membrane]
V = engine.pace
    desc: membane potential
    in [mV]

[nernst]
EK = -85

[ikr]
use membrane.V
a1 = p1 * exp(p2 * (V - 36))
a2 = p7 * exp(p8 * V)
a3 = p5
a4 = p11 * exp(p12 * (V - 12))
b1 = p3 * exp(p4 * V)
b2 = p9 * exp(p10 * (V + 25))
b3 = p6
b4 = p13 * exp(p14 * V)
b5 = b1 * b2 / a2
g = p15
dot(C3) = b4 * C2 - (a4) * C3
dot(C2) = a4 * C3 + b3 * C1 - (b4 + a3) * C2
dot(C1) = a3 * C2 + b1 * O + b5 * I - (b3 + a1 + a1) * C1
dot(I)  = a1 * C1 + a2 * O - (b5 + b2) * I
dot(O)  = a1 * C1 + b2 * I - (b1 + a2) * O
IKr = g * O * (V - nernst.EK)
p1 = 0.0655         # 1/ms  > 0
p2 = 0.05547153     # 1/mV
p3 = 0.0029357
p4 = -0.02158
p5 = 2.172
p6 = 1.077
p7 = 0.6796
p8 = 0.000942
p9 = 0.4939
p10 = -0.02352
p11 = 0.0555
p12 = 0.05547153
p13 = 0.002357
p14 = -0.036588
p15 = 0.04          # mS/uF

[[script]]
import matplotlib.pyplot as pl
import numpy as np
import myokit
import myokit.pacing as pacing

# Get model
m = get_model()

# Pre-pace at -120 mV
"""
vhold = -140
m.get('membrane.V').set_rhs(vhold)
s = myokit.Simulation(m)
s.pre(1000*100)
m.get('membrane.V').set_rhs(myokit.Name(m.get('engine.pace')))
m.set_state(s.state())
"""

# Create pacing protocol
tpre  = 2000        # Time before step to variable V
tstep = 5000        # Time at variable V
tpost = 3000        # Time after step to variable V
ttotal = tpre + tstep + tpost
vhold = -80         # V before and after step
vres = 10           # Difference in V between steps
v = np.arange(-100, 50 + 10, 10)
# Create block train protocol
p = pacing.steptrain(
        vsteps=v,
        vhold=vhold,
        tpre=tpre,
        tstep=tstep,
        tpost=tpost)

d = [
    'engine.time',
    'membrane.V',
    'ikr.IKr',
    ]

# Run simulation
s = myokit.Simulation(m, p)
d = s.run(p.characteristic_time(), log=d)

# Plot raw data
pl.figure()
pl.subplot(2,1,1)
pl.plot(d.time(), d['membrane.V'])
pl.subplot(2,1,2)
pl.plot(d.time(), d['ikr.IKr'])

# Plot data as overlapping steps
n = len(v)                  # Number of voltages testsed
d2 = d.npview()             # Transform data lists to numpy arrays
d2 = d2.regularize(0.5)     # Resample at dt=0.5ms
d2 = d2.fold(ttotal)        # Cut data into overlapping pieces
pl.figure()
for k in xrange(n):
    pl.subplot(2,1,1)
    pl.plot(d2.time(), d2['membrane.V', k])
    pl.subplot(2,1,2)
    pl.plot(d2.time(), d2['ikr.IKr', k])

# Store raw data
d.save_csv('simple.csv')

pl.show()


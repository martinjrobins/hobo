#!/usr/bin/env python2
#
# Command line tools for Myokit.
#
# To see the various options, run "python myo -h"
#
# This file is part of Myokit
#  Copyright 2017      Michael Clerx, University of Oxford
#  Copyright 2011-2016 Michael Clerx, Maastricht University
#  Licensed under the GNU General Public License v3.0
#  See: http://myokit.org
#
from __future__ import print_function
# Load Myokit
import sys
print('Loading Myokit...')
sys.stdout.flush()
import myokit
import myokit.formats
# Load remaining libraries
import os
import argparse
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Printing options
#
#
line_width = 60
def printline():
    print('-' * line_width)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Top-level parser
#
#
parser = argparse.ArgumentParser(
    description = 'Command line tools for myokit.',
    )
subparsers = parser.add_subparsers(
    description = 'Select one of the available commands from the list below',
    title = 'Commands',
    )
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# block :: Runs the DataBlock Viewer
#
#
def block(filename, pyqt4=False, pyqt5=False, pyside=False):
    import myokit
    if pyqt5:
        myokit.FORCE_PYQT5 = True
        myokit.FORCE_PYQT4 = False
        myokit.FORCE_PYSIDE = False
    elif pyqt4:
        myokit.FORCE_PYQT5 = False
        myokit.FORCE_PYQT4 = True
        myokit.FORCE_PYSIDE = False        
    elif pyside:
        myokit.FORCE_PYQT4 = False
        myokit.FORCE_PYQT4 = False
        myokit.FORCE_PYSIDE = True
    import myokit.gui
    import myokit.gui.datablock_viewer
    if pyqt5 or pyqt4 or pyside:
        print('Using backend: ' + myokit.gui.backend)
    myokit.gui.run(myokit.gui.datablock_viewer.DataBlockViewer, filename)
# Subcommand parser
block_parser = subparsers.add_parser(
    'block',
    description = 'Runs the DataBlock Viewer.',
    help = 'Runs the DataBlock Viewer.',
    )
block_parser.add_argument(
    'filename',
    default = None,
    nargs = '?',
    metavar = 'filename',
    help = 'The DataBlock zip file to open (optional).',
    )
block_parser.add_argument(
    '--pyqt5',
    action = 'store_true',
    help = 'Run the DataBlock Viewer using the PyQt5 backend.',
    )
block_parser.add_argument(
    '--pyqt4',
    action = 'store_true',
    help = 'Run the DataBlock Viewer using the PyQt4 backend.',
    )
block_parser.add_argument(
    '--pyside',
    action = 'store_true',
    help = 'Run the DataBlock Viewer using the PySide backend.',
    )
block_parser.set_defaults(func=block)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# compare :: Compares two models.
#
def compare(model1, model2):
    # Load models
    m1 = myokit.load_model(model1)
    m2 = myokit.load_model(model2)
    # Compare
    c = myokit.ModelComparison(m1, m2, live=True)
# Subcommand parser
compare_parser = subparsers.add_parser(
    'compare',
    description = 'Compares two models by inspecting their components,'
        ' variables, meta-data etc.',
    help = 'Compares two models.',
    )
compare_parser.add_argument(
    'model1',
    metavar = 'model1..mmt',
    help = 'One of the models to compare.',
    )
compare_parser.add_argument(
    'model2',
    metavar = 'model2.mmt',
    help = 'The model to compare with.',
    )
compare_parser.set_defaults(func=compare)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# debug :: Shows how a single variable is calculated from the initial
#          conditions.
#
def debug(source, variable, deps=False):
    # Load model
    m = myokit.load_model(source)
    # Show result
    if deps:
        print(m.show_expressions_for(variable))
    else:
        print(m.show_evaluation_of(variable))
# Subcommand parser
debug_parser = subparsers.add_parser(
    'debug',
    description = 'Shows how a single variable is calculated from the initial'
              ' conditions. The variable\'s equation and value are displayed,'
              ' along with the value and formula of any nested variables and'
              ' the values of all dependencies.',
    help = 'Shows how a single variable is calculated.',
    )
debug_parser.add_argument(
    'source',
    metavar = 'source_file.mmt',
    help = 'The source file to parse.',
    )
debug_parser.add_argument(
    'variable',
    metavar = 'variable',
    help = 'The variable whose evaluation to display.',
    )
debug_parser.add_argument(
    '--deps',
    action = 'store_true',
    help = 'Show dependencies instead of numerical evaluation.',
    )
debug_parser.set_defaults(func=debug)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# eval :: Evaluate an expression in myokit syntax
#
#
def evaluate(expression):
    try:
        e = myokit.parse_expression(expression)
        e = e.eval() if e.is_literal() else e
        print(expression + ' = ' + str(e))
    except myokit.ParseError as ex:
        print(myokit.format_parse_error(ex, iter([expression])))
# Subcommand parser
eval_parser = subparsers.add_parser(
    'eval',
    description = 'Evaluates an expression in myokit syntax.',
    help = 'Evaluates an expression in myokit syntax.',
    )
eval_parser.add_argument(
    'expression',
    metavar = '"1 + 2 / 3"',
    help = 'The expression to evaluate.',
    )
eval_parser.set_defaults(func=evaluate)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# export :: Exports a myokit model
#
#
def mmt_export(exporter, source, target):
    # Get exporter
    exporter = myokit.formats.exporter(exporter)
    # Set to auto-print
    exporter.set_live(True)
    exporter.log_flair(str(exporter.__class__.__name__))
    # Parse input file
    try:
        exporter.log('Reading model from ' + myokit.format_path(source))
        model, protocol, script = myokit.load(source)
    except myokit.ParseError as ex:
        exporter.log(myokit.format_parse_error(ex, source))
        sys.exit(1)
    # Must have model
    if model is None:
        exporter.log('Error: Imported file must contain model definition.')
        sys.exit(1)
    else:
        exporter.log('Model read successfully')
    # Export model or runnable
    if exporter.supports_model():
        # Export model
        exporter.log('Exporting model')
        exporter.model(target, model)
    else:
        # Export runnable
        exporter.log('Exporting runnable')
        if protocol is None:
            exporter.log('No protocol found.')
        else:
            exporter.log('Using embedded protocol.')
        exporter.runnable(target, model, protocol)    
    exporter.log_flair('Export successful')
    exporter.log(exporter.info())
# Subcommand parser
export_parser = subparsers.add_parser(
    'export',
    description = 'Exports a Myokit model using the specified exporter.',
    help = 'Exports a Myokit model.',
    )    
export_parser.add_argument(
    'exporter',
    metavar = 'exporter',
    help = 'The exporter to use.',
    choices = myokit.formats.exporters(),
    )
export_parser.add_argument(
    'source',
    metavar = 'source',
    help = 'The source file to parse.',
    )
export_parser.add_argument(
    'target',
    metavar = 'target',
    help = 'The output file or directory.'
    )
export_parser.set_defaults(func=mmt_export)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# gde :: Runs the graph data extractor
#
#
def gde(filename):
    import myokit.gui
    import myokit.gui.gde
    myokit.gui.run(myokit.gui.gde.GraphDataExtractor, filename)
# Subcommand parser
gde_parser = subparsers.add_parser(
    'gde',
    description = 'Runs the graph data extractor.',
    help = 'Runs the graph data extractor.',
    )
gde_parser.add_argument(
    'filename',
    default = None,
    nargs = '?',
    metavar = 'filename',
    help = 'The gde file to open (optional).',
    )
gde_parser.set_defaults(func=gde)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# ide :: Runs the Myokit IDE prototype
#
#
def ide(filename, pyqt4=False, pyqt5=False, pyside=False):
    import myokit
    if pyqt5:
        myokit.FORCE_PYQT5 = True
        myokit.FORCE_PYQT4 = False
        myokit.FORCE_PYSIDE = False
    elif pyqt4:
        myokit.FORCE_PYQT5 = False
        myokit.FORCE_PYQT4 = True
        myokit.FORCE_PYSIDE = False        
    elif pyside:
        myokit.FORCE_PYQT4 = False
        myokit.FORCE_PYQT4 = False
        myokit.FORCE_PYSIDE = True
    import myokit.gui
    import myokit.gui.ide
    if pyqt5 or pyqt4 or pyside:
        print('Using backend: ' + myokit.gui.backend)
    myokit.gui.run(myokit.gui.ide.MyokitIDE, filename)
# Subcommand parser
ide_parser = subparsers.add_parser(
    'ide',
    description = 'Runs the Myokit IDE prototype.',
    help = 'Runs the Myokit IDE prototype.',
    )
ide_parser.add_argument(
    'filename',
    default = None,
    nargs = '?',
    metavar = 'filename',
    help = 'The mmt file to open (optional).',
    )
ide_parser.add_argument(
    '--pyqt5',
    action = 'store_true',
    help = 'Run the IDE using the PyQt5 backend.',
    )
ide_parser.add_argument(
    '--pyqt4',
    action = 'store_true',
    help = 'Run the IDE using the PyQt4 backend.',
    )
ide_parser.add_argument(
    '--pyside',
    action = 'store_true',
    help = 'Run the IDE using the PySide backend.',
    )
ide_parser.set_defaults(func=ide)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# import :: Imports a model and saves it in mmt format
#
#
def mmt_import(importer, source, target=None):
    # Get importer
    importer = myokit.formats.importer(importer)
    # If a target is specified, set the importer to live logging mode
    if target:
        importer.set_live(True)
    importer.log_flair(str(importer.__class__.__name__))
    # Import
    m = importer.model(source)
    # If a target is specified, save the output
    if target:
        # Save or output model to new location
        importer.log('Saving output to ' + str(target))
        myokit.save(target, m)
        importer.log('Done.')
    else:
        # Write it to screen
        print(myokit.save(None, m))
# Subcommand parser
import_parser = subparsers.add_parser(
    'import',
    description = 'Imports a file using any available importer. An output file'
        ' can be specified or the resulting mmt file can be printed directly'
        ' to screen.',
    help = 'Imports a file and generates an mmt file.',
    )
import_parser.add_argument(
    'importer',
    metavar = 'importer',
    help = 'The importer to use.',
    choices = myokit.formats.importers(),
    )
import_parser.add_argument(
    'source',
    metavar = 'source_file',
    help = 'The source file to parse.',
    )
import_parser.add_argument(
    'target',
    default = None,
    nargs = '?', # ? = Zero or one
    metavar = 'target_file',
    help = 'The mmt file to write (optional).',
    )
import_parser.set_defaults(func=mmt_import)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# log :: Runs the DataLog Viewer
#
#
def log(filenames):
    import myokit.gui
    import myokit.gui.datalog_viewer
    myokit.gui.run(myokit.gui.datalog_viewer.DataLogViewer, *filenames)
# Subcommand parser
log_parser = subparsers.add_parser(
    'log',
    description = 'Runs the DataLog Viewer (PROTOTYPE).',
    help = 'Runs the DataLog Viewer (PROTOTYPE).',
    )
log_parser.add_argument(
    'filenames',
    default = None,
    nargs = argparse.REMAINDER,
    metavar = 'filename',
    help = 'The DataLog zip file to open (optional).',
    )
log_parser.set_defaults(func=log)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# opencl :: Queries for OpenCL support.
#
#
def opencl():
    print(myokit.OpenCL.info(formatted=True))
# Subcommand parser
opencl_parser = subparsers.add_parser(
    'opencl',
    description = 'Checks for OpenCL support and prints some information about'
        ' the available devices. If no support is found, an error message is'
        ' displayed.',
    help = 'Prints information about OpenCL devices.',
    )
opencl_parser.set_defaults(func=opencl)    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# opencl-select :: Select the OpenCL device to use.
#
#
def opencl_select():
    w = 70
    print('='*w)
    print('Myokit OpenCL device selection')
    print('='*w)
    # Get info about devices
    devices = myokit.OpenCL.selection_info()
    # Get current selection
    old_platform, old_device = myokit.OpenCL.load_selection()
    # Display name
    def name(x):
        return 'No preference' if x is None else x
    # Show header
    print('Selected platform: ' + name(old_platform))
    print('Selected device  : ' + name(old_device))
    print('='*w)
    print('Available devices:')
    print('-'*w)
    # Create and display list of options
    options = []
    # Option 0: Automatic select
    idx = 1
    print('(1) Select automatically.')
    print('-'*w)
    options.append((None, None))
    # Remaining devices
    for platform, device, specs in devices:
        options.append((platform, device))
        idx += 1
        space = ' '*(3 + len(str(idx)))
        print('(' + str(idx) + ') Platform: ' + platform)
        print(space + 'Device: ' + device)
        print(space + specs)
        print('-'*w)
    # Select
    n = len(options)
    if n < 2:
        print('No OpenCL devices found!')
        sys.exit(1)
    if n == 2:
        q = '1 or 2'
    elif n < 6:
        q = ','.join([str(x) for x in xrange(1, n)]) + ' or ' + str(n)
    else:
        q = 'one of 1,2,3,...,' + str(n)
    print('Please select an OpenCL device by typing ' + q)
    print('Leave blank to keep current selection.')
    try:
        while True:
            x = raw_input('Select device: ')
            x = x.strip()
            if x == '':
                x = None
                break
            try:
                x = int(x)
                if x > 0 and x <= n:
                    break
            except ValueError:
                pass
            print('Invalid selection, please retry')
    except KeyboardInterrupt:
        print('')
        print('OpenCL device selection aborted.')
        sys.exit(0)
    print('-'*w)
    if x is None:
        platform, device = old_platform, old_device
    else:
        platform, device = options[x - 1]
    print('Selected platform: ' + name(platform))
    print('Selected device  : ' + name(device))
    if x is None:
        print('Selection unchanged.')
    else:
        myokit.OpenCL.save_selection(platform, device)
        print('Selection updated.')        
# Subcommand parser
opencl_select_parser = subparsers.add_parser(
    'opencl-select',
    description = 'Lets you select which OpenCL device Myokit should use.',
    help = 'Lets you select which OpenCL device Myokit should use.',
    )
opencl_select_parser.set_defaults(func=opencl_select)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# reset :: Removes all Myokit settings files
#
#
def reset(force=False):
    # Ask user if settings should be deleted
    if force:
        remove = True
    else:
        yesno = raw_input('Remove all Myokit settings files? ')
        yesno = yesno.strip().lower()
        remove = (yesno[:1] == 'y')
    if remove:
        print('Removing')
        print('  ' + myokit.DIR_USER)
        import shutil
        shutil.rmtree(myokit.DIR_USER)
        print('Done')
    else:
        import sys
        print('Aborting.')
        sys.exit(1)
# Subcommand parser
reset_parser = subparsers.add_parser(
    'reset',
    description = 'Removes all Myokit settings files, resetting Myokit to its'
        ' default configuration.',
    help = 'Removes all Myokit settings files.',
    )
reset_parser.add_argument(
    '--force',
    action = 'store_true',
    help = 'Delete without prompting the user first.',
    )    
reset_parser.set_defaults(func=reset)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# run :: Performs a quick test run of the model.
#
#
def run(source, debug, debugfile):
    # Debug?
    myokit.DEBUG = myokit.DEBUG or debug or debugfile
    # Read mmt file
    try:
        print('Reading model from ' + source)
        with myokit.Benchmarker() as b:
            (model, protocol, script) = myokit.load(source)
            print('File loaded in ' + str(b.time()) + ' seconds')
        if model is None:
            print('No model definition found')
        else:
            print('Model read successfully')
            print(model.format_warnings())
            model.solvable_order()
    except myokit.ParseError as ex:
        print(myokit.format_parse_error(ex, source))
        sys.exit(1)
    # Set up pacing protocol
    if protocol is None:
        print('No protocol definition found')
        print('Preparing default pacing protocol (1ms stimulus, 1bpm)')
        protocol = myokit.pacing.blocktrain(1000, 1)
    # Set up script
    if script is None:
        if model is None:
            print('No script or model found, terminating')
            sys.exit(1)
        else:
            print('No embedded script found, using default.')
            script = myokit.default_script()
    else:
        print('Using embedded script')
    # Run, capture output and write to file
    if debugfile:
        debugfile = debugfile[0]
        with open(debugfile, 'w') as f:
            stdout = sys.stdout
            try:
                sys.stdout = f
                line_numbers = myokit.DEBUG_LINE_NUMBERS
                myokit.DEBUG_LINE_NUMBERS = False
                myokit.run(model, protocol, script)
            except SystemExit:
                pass
            finally:
                sys.stdout = stdout
                myokit.DEBUG_LINE_NUMBERS = line_numbers
            print('Output written to ' + str(debugfile))
    else:
        import math
        # Show script
        printline()
        lines = script.splitlines()
        n = 1 + math.floor(math.log10(len(lines)))
        template = '{:>3d} {:s}'
        i = 0
        for line in lines:
            i += 1
            print(template.format(i, line))
        printline()
        # Run!
        myokit.run(model, protocol, script)
# Subcommand parser
run_parser = subparsers.add_parser(
    'run',
    description = 'Runs the embedded script in an mmt file. If no embedded'
        ' script is available a simulation with a default script is'
        ' attempted.',
    help = 'Runs an mmt file.',
    )
run_parser.add_argument(
    'source',
    metavar = 'source_file.mmt',
    help = 'The source file to parse.',
    )
run_parser.add_argument(
    '--debug',
    action = 'store_true',
    help = 'Show the generated code instead of executing it.',
    )
run_parser.add_argument(
    '--debugfile',
    nargs = 1,
    metavar = 'debugfile',
    help = 'Write the generated code to a file instead of executing it.',
    default = None,
    )
run_parser.set_defaults(func=run)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# step :: Loads a model and evaluates the state vector derivatives.
#
#
def step(source, ref, ini, raw):
    # Parse reference file, if given
    if ref and not raw:
        print('Reading reference file...')
        try:
            ref = myokit.load_model(ref[0])
            print('Reference model loaded successfully.')
        except Exception:
            ref = myokit.load_state(ref[0])
            print('Reference file read successfully.')
    # Parse initial value file, if given
    if ini:
        if not raw:
            print('Reading initial value file...')
        ini = myokit.load_state(ini[0])
        if not raw:
            print('Initial value file read successfully.')
    # Load myokit model
    try:
        if not raw:
            print('Reading model from ' + source + '...')
        model = myokit.load_model(source)
        if not raw:
            print('Model ' + model.name() + ' read successfully.')
    except myokit.ParseError as ex:
        print(myokit.format_parse_error(ex, source))
        sys.exit(1)
    # Ensure proper ordering of reference and initial value files
    if ref and not isinstance(ref, myokit.Model):
        ref = model.map_to_state(ref)
    # Evaluate all derivatives, show the results
    try:
        if raw:
            derivs = model.eval_state_derivatives(state=ini)
            print('\n'.join([myokit.strfloat(x) for x in derivs]))
        else:
            print(myokit.step(model, initial=ini, reference=ref))
    except myokit.NumericalError as ee:
        e = 'Numerical error'
        n = line_width - len(e) - 2
        print('-'*int(n/2) + ' ' + e + ' ' + '-'*(n-int(n/2)))
        print('A numerical error occurred:')
        print(ee.message)
# Subcommand parser
step_parser = subparsers.add_parser(
    'step',
    description = 'Loads a model and evaluates the state vector derivatives.'
        ' The optional argument -ref <source_file> can be used to compare the'
        ' calculated derivatives to a list of pre-calculated floats.',
    help = 'Evaluates a model\'s derivatives.',
    )
step_parser.add_argument(
    'source',
    metavar='source_file',
    help='The source file to parse',
    )
step_parser.add_argument(
    '-ref',
    nargs = 1,
    metavar = 'ref',
    help = 'A text file with a list of numbers to compare against, or a' \
           ' reference model to compare against.',
    default = None,
    )
step_parser.add_argument(
    '-ini',
    nargs = 1,
    metavar = 'ini',
    help = 'A text file with a list of initial values for the state variables',
    default = None,
    )
step_parser.add_argument(
    '--raw',
    action = 'store_true',
    help = 'Display the calculated state, without further formatting.',
    )
step_parser.set_defaults(func=step)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# update :: Perform an online update
#
#
def update():
    # Import required modules
    import shutil
    import urllib
    import urllib2
    import difflib
    import zipfile
    import tempfile
    import textwrap
    # Get current version
    local_version = str(myokit.VERSION)
    local_version_int = list(myokit.VERSION_INT)
    # Download paths
    MYO = 'http://myokit.org/'
    API = MYO + 'api/'
    # API call to get current online version
    API_VERSION    = API + 'version'
    # API call to get URL pointing to latest online version
    API_MYOKIT     = API + 'myokit'
    # API call to get lowest version number that can use the automatic update
    # feature to update to the current online function.
    API_CAN_UPDATE = API + 'can_update'
    def read(url):
        """
        Reads the contents of a URL.
        """
        try:
            response = urllib2.urlopen(url)
            return response.read()
        except urllib2.HTTPError as e:
            print('Unable to fetch: ')
            print('  ' + e.url)
            print('  Server returned code: ' + str(e.code) + ',' + e.msg)
            sys.exit(1)
    # Say hello
    print('Myokit updater version ' + local_version)
    printline()
    print('Retrieving version info from:')
    print('  ' + MYO)
    # Check if this version of the updater can be used
    supported = read(API_CAN_UPDATE)
    try:
        supported_int = [int(x) for x in supported.split('.')]
        major, minor, revision = supported_int # Test if len == 3
    except ValueError as e:
        print('Error: received malformed version number.')
        print('  ' + supported)
        sys.exit(1)
    if local_version_int < supported_int:
        print('Incompatible updater version.')
        text = 'The current updater version (' + local_version + ') is unable'\
            ' to update to version ' + supported + ' or higher. Please'\
            ' perform a manual update by downloading the new source files from'
        text = textwrap.fill(text, line_width)
        print(text)
        print('  ' + MYO)
        return
    # Check version online
    version = read(API_VERSION)
    try:
        version_int = [int(x) for x in version.split('.')]
        major, minor, revision = version_int # Test if len == 3
    except ValueError as e:
        print('Error: received malformed version number.')
        print('  ' + version)
        sys.exit(1)
    # Compare versions
    if local_version_int > version_int:
        print('Already up to date.')
        print('Current version (' + local_version + ') is newer than online'
            ' version (' + version + ').')
        return
    elif local_version_int == version_int:
        print('Already up to date.')
        print('Current version (' + local_version + ') matches online'
            ' version')
        return
    # Get location of update
    print('Newer version available online: ' + version)
    url_update = read(API_MYOKIT)
    # Get location of current version
    path_current = os.path.dirname(os.path.abspath(__file__))
    print('Myokit currently installed in:')
    print('  ' + path_current)
    # Create directory for new version
    path_update = os.path.join(path_current, 'update-' + version)
    if os.path.exists(path_update):
        i = 1
        p = path_update
        while os.path.exists(p):
            i += 1
            p = path_update + '-' + str(i)
        path_update = p
    print('Storing update in:')
    print('  ' + path_update)
    os.mkdir(path_update)
    try: # Should delete path_update when done
        # Download update
        path_update_zip = os.path.join(path_update, 'myokit.zip')
        try:
            print('Downloading from ')
            print('  ' + url_update)
            def progress(blocks, block_size, file_size):
                if file_size < 0:
                    print('\rDownloaded ??%',)
                else:
                    p = float(blocks * block_size) / file_size
                    p = int(100 * min(1, p))
                    print('\rDownloaded ' + str(p) + '%  ', end='')
            urllib.urlretrieve(url_update, path_update_zip, progress)
            print('\rDownloaded 100%')
        except urllib2.HTTPError as e:
            print('Unable to fetch: ')
            print('  ' + e.url)
            print('  Server returned code: ' + str(e.code) + ',' + e.msg)
            sys.exit(1)
        urllib.urlcleanup()
        # Unpack update
        print('Unpacking update')
        zf = zipfile.ZipFile(path_update_zip, 'r')
        zf.extractall(path_update)
        zf.close()
        os.remove(path_update_zip)
        path_update_2 = os.path.join(path_update, 'myokit-' + version)
        if not os.path.isdir(path_update_2):
            print('Error: Could not find new myokit directory in downloaded'
                ' files.')
            sys.exit(1) # Exit, without deleting the update files!
        # Create directory for previous version
        path_backup = os.path.join(path_current, 'backup-' + myokit.VERSION)
        if os.path.exists(path_backup):
            i = 1
            p = path_backup
            while(os.path.exists(p)):
                i += 1
                p = path_backup + '-' + str(i)
            path_backup = p
        print('Storing back-up of current version in:')
        print('  ' + path_backup)
        # Move current version into back-up path
        os.mkdir(path_backup)
        nodes = [
            'about',
            'myokit',
            'myo',
            'readme.txt',
            ]
        for node in nodes:
            src = os.path.join(path_current, node)
            dst = os.path.join(path_backup, node)
            if os.path.exists(src):
                print('Moving ' + src)
                shutil.move(src, dst)
        # Move new version into current path
        print('Installing new files')
        for node in nodes:
            src = os.path.join(path_update_2, node)
            dst = os.path.join(path_current, node)
            if os.path.exists(src):
                print('Moving ' + src)
                shutil.move(src, dst)
        # Check for any new files, not in the list of nodes
        for node in os.listdir(path_update_2):
            print('Found unknown new file: ')
            print('  ' + node)
            src = os.path.join(path_current, node)
            if os.path.exists(src):
                dst = os.path.join(path_backup, node)
                print('  Moving existing version to backup')
                shutil.move(src, dst)
            dst = src
            src = os.path.join(path_update_2, node)
            print('  Installing new version')
            shutil.move(src, dst)
        # Remove old settings.py if present
        path_settings = os.path.join(path_backup, 'myokit', 'settings.py')
        if (os.path.isfile(path_settings)):
            print('WARNING: Setting file found. Myokit has switched from')
            print('  using myokit/settings.py to an ini file in the user home')
            print('  directory. Please port any changes made to:')
            print('  ' + os.path.expanduser(os.path.join('~', 'myokit',
                'myokit.ini')))
            print('Backing up myokit/settings.py as old_settings.txt')
            shutil.move(path_settings, os.path.join(path_current,
                'old_settings.txt'))
    finally:
        # Delete update path
        print('Removing downloaded files...')
        if os.path.exists(path_update):
            shutil.rmtree(path_update)
    # Reload myokit
    printline()
    print('Update Completed Succesfully')
    try:
        reload(myokit)
        print('Current myokit version: ' + myokit.VERSION)
    except Exception as e:
        sys.exit(0)
# Subcommand parser
update_parser = subparsers.add_parser(
    'update',
    description = 'Search online for a new update and install it.',
    help = 'Search online for a new update and install it.',
    )
update_parser.set_defaults(func=update)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# version :: Tells you which version this is
#
#
def version(raw=False):
    print(myokit.version(raw))
# Subcommand parser
version_parser = subparsers.add_parser(
    'version',
    description = 'Prints Myokit\'s version number.',
    help = 'Prints Myokit\'s version number.',
    )
version_parser.add_argument(
    '--raw',
    action = 'store_true',
    help = 'Only print the version number, no other information.',
    )
version_parser.set_defaults(func=version)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# video :: Use "moviepy" to create an animation from a DataBlock2d.
#
#
def video(src, key, dst, fps, colormap):
    # Test if moviepy is installed
    print('Loading moviepy.')
    try:
        import moviepy
        import moviepy.editor as mpy
    except ImportError:
        print('This function requires MoviePy to be installed.')
        sys.exit(1)
    print('Done.')
    # Get filename
    src = os.path.abspath(os.path.expanduser(str(src)))
    # Get codec from destination file
    codecs = {
        '.flv'  : 'flv',
        '.gif'  : 'gif',
        '.mp4'  : None,
        '.mpeg' : 'mpeg1video',
        '.wmv'  : 'wmv1',
        }
    ext = os.path.splitext(dst)[1].lower()
    try:
        codec = codecs[ext]
    except KeyError:
        print('Unable to determine codec for "' + ext + '"')
        print('Known extensions:')
        for ext in codecs:
            print('  ' + ext)
        sys.exit(1)
    # Get frame rate
    fps = int(fps)
    if fps < 1:
        print('Frame rate must be integer greater than zero.')
        sys.exit(1)
    # Open file
    class Reporter(myokit.ProgressReporter):
        def __init__(self):
            self._last = 0
        def enter(self, msg=None):
            sys.stdout.write('Loading file: 0%' + chr(8)*2)
            sys.stdout.flush()
        def exit(self):
            sys.stdout.write('\n')
            sys.stdout.flush()
        def update(self, f):
            p = int(f * 100)
            if p > self._last:
                self._last = p
                p = str(p) + '%'
                sys.stdout.write(p + chr(8)*len(p))
                sys.stdout.flush()
            return True
    reporter = Reporter()
    try:
        data = myokit.DataBlock2d.load(src, progress=reporter)
    except myokit.DataBlockReadError as e:
        print('DataBlock reading failed\n: ' + e.message)
        sys.exit(1)
    finally:
        del(reporter)
    # Don't load empty files
    if data.len2d() < 1:
        print('Empty DataBlock loaded!')
        sys.exit(1)
    # Check if key exists in 2d data
    try:
        x = data.get2d(key)
    except KeyError:
        print('Key not found in DataBlock: <' + str(key) + '>.')
        sys.exit(1)
    # File loaded okay
    nt, ny, nx = data.shape()
    print('Done.')
    print('  nx = ' + str(nx))
    print('  ny = ' + str(ny))
    print('  nt = ' + str(nt))
    # Create movie
    print('Converting data into image frames.')
    frames = data.colors(key, colormap=colormap)
    print('Compiling frames into video clip.')
    video = mpy.ImageSequenceClip(frames, fps=fps)
    video.write_videofile(dst, fps=24, audio=False, codec=codec)
# Subcommand parser
video_parser = subparsers.add_parser(
    'video',
    description = 'Uses "moviepy" to convert a DataBlock to a video file.'
                  ' The video format to use is guessed based on the extension'
                  ' of the output file.',
    help = 'Creates video files from DataBlocks.',
    usage = '\nCreate video files:'
            '\n  myo video datablock.zip membrane.V -dst movie.mp4'
            '\nMore options:'
            '\n  myo -h',
    )
video_parser.add_argument(
    'src',
    metavar = 'datablock.zip',
    help = 'The DataBlock file to convert',
    )
video_parser.add_argument(
    'key',
    metavar = 'membrane.V',
    help = 'The 2d time series in the DataBlock to convert to video',
    )
video_parser.add_argument(
    '-dst',
    metavar = 'movie.mp4',
    help = 'The video file to write',
    default = 'movie.mp4',
    )
video_parser.add_argument(
    '-fps',
    metavar = 'fps',
    help = 'The number of (DataBlock) frames per second',
    default = 16,
    )
video_parser.add_argument(
    '-colormap',
    metavar = 'colormap',
    help = 'The ColorMap to use when converting the DataBlock.',
    default = 'traditional',
    choices = myokit.ColorMap.names(),
    )
video_parser.set_defaults(func=video)    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
#
# Parse the arguments
#
#
def parse():
    if len(sys.argv) == 1:
        ide(None)
    else:
        args = parser.parse_args()
        # Get the args' objects attributes as a dictionary
        args = vars(args)
        # Split into function and arguments
        func = args['func']
        del(args['func'])
        # Call the selected function with the parsed arguments
        func(**args)
if __name__ == '__main__':
    parse()
